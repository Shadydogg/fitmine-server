const supabase = require('./supabase');

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç Google —Ç–æ–∫–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É google_tokens
 * –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ google_connected –≤ —Ç–∞–±–ª–∏—Ü–µ users
 * @param {string} telegram_id
 * @param {object} tokens ‚Äî { access_token, refresh_token, scope, token_type, expires_in, expires_at }
 * @returns {Promise<{ error: any }>}
 */
async function storeGoogleToken(telegram_id, tokens) {
  if (!telegram_id || !tokens?.access_token || !tokens?.refresh_token) {
    console.error('‚ùå storeGoogleToken: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã');
    return { error: 'Missing access_token or refresh_token' };
  }

  const expires_at =
    tokens.expires_at || new Date(Date.now() + tokens.expires_in * 1000).toISOString();

  // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É google_tokens
  const { error: tokenError } = await supabase
    .from('google_tokens')
    .upsert(
      {
        telegram_id,
        access_token: tokens.access_token,
        refresh_token: tokens.refresh_token,
        scope: tokens.scope || '',
        token_type: tokens.token_type || 'Bearer',
        expires_in: tokens.expires_in,
        expires_at, // ‚úÖ –ø–æ–ª–µ –ü–†–ê–í–ò–õ–¨–ù–û–ï
        updated_at: new Date().toISOString(),
      },
      {
        onConflict: 'telegram_id',
      }
    );

  if (tokenError) {
    console.error('‚ùå [Supabase] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', tokenError);
    return { error: tokenError };
  }

  // ‚öôÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º google_connected = true
  const { error: userError } = await supabase
    .from('users')
    .upsert(
      {
        telegram_id,
        google_connected: true,
        updated_at: new Date().toISOString(),
      },
      {
        onConflict: 'telegram_id',
      }
    );

  if (userError) {
    console.error('‚ö†Ô∏è [Supabase] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è users.google_connected:', userError);
    return { error: userError };
  }

  console.log(`‚úÖ Google —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ —Ñ–ª–∞–≥ google_connected —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${telegram_id}`);
  return { error: null };
}

module.exports = storeGoogleToken;