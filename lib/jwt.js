const jwt = require('jsonwebtoken');
const { randomUUID } = require('crypto');

const JWT_SECRET = process.env.JWT_SECRET || 'fitmine_super_secret';
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '15m';        // ‚è± access_token
const REFRESH_EXPIRES_IN = process.env.REFRESH_EXPIRES_IN || '30d'; // üîÅ refresh_token

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è access –∏ refresh —Ç–æ–∫–µ–Ω–æ–≤
 * @param {Object} payload - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, telegram_id)
 * @returns {{ access_token: string, refresh_token: string, jti: string }}
 */
function generateTokens(payload) {
  const jti = randomUUID(); // üßæ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏

  const access_token = jwt.sign({ ...payload, jti }, JWT_SECRET, {
    expiresIn: JWT_EXPIRES_IN,
  });

  const refresh_token = jwt.sign({ ...payload, jti }, JWT_SECRET, {
    expiresIn: REFRESH_EXPIRES_IN,
  });

  return { access_token, refresh_token, jti };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
 * @param {string} token - JWT
 * @returns {Object} payload
 * @throws {Error} –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
 */
function verifyToken(token) {
  return jwt.verify(token, JWT_SECRET);
}

module.exports = {
  generateTokens,
  verifyToken,
};