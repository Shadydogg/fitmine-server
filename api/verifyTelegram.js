// ‚úÖ v3.3.0 ‚Äî Telegram verify + Access + Refresh + jti
const { validate, parse } = require('@telegram-apps/init-data-node');
const supabase = require('../lib/supabase');
const { generateTokens } = require('../lib/jwt'); // ‚¨ÖÔ∏è –ù–æ–≤—ã–π –º–æ–¥—É–ª—å

const BOT_TOKEN = process.env.BOT_TOKEN;

module.exports = async (req, res) => {
  try {
    const authHeader = req.headers.authorization || '';
    const [authType, authData] = authHeader.split(' ');

    if (authType !== 'tma' || !authData) {
      return res.status(401).json({ ok: false, error: 'Missing or invalid Authorization header' });
    }

    // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Telegram
    validate(authData, BOT_TOKEN.trim(), { expiresIn: 3600 });
    const initData = parse(authData);
    const user = initData.user;

    console.log('‚úÖ –ü–æ–¥–ø–∏—Å—å Telegram –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);

    // üóÉÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error } = await supabase
      .from('users')
      .upsert({
        telegram_id: user.id,
        first_name: user.first_name || '',
        last_name: user.last_name || '',
        username: user.username || '',
        photo_url: user.photo_url || '',
        language_code: user.language_code || 'en',
        is_premium: user.is_premium ?? false,
        allows_write_to_pm: user.allows_write_to_pm ?? false
      }, {
        onConflict: 'telegram_id'
      });

    if (error) {
      console.error('‚ùå Supabase –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!');
      console.error('üõ†Ô∏è –ö–æ–¥:', error.code);
      console.error('üìÑ –î–µ—Ç–∞–ª–∏:', error.details);
      return res.status(500).json({ ok: false, error: 'Supabase error', detail: error.message });
    }

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å upsert –≤—ã–ø–æ–ª–Ω–µ–Ω: telegram_id=${user.id}`);

    // üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º access + refresh —Ç–æ–∫–µ–Ω—ã
    const { access_token, refresh_token, jti } = generateTokens({ telegram_id: user.id });

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º jti –≤ token_sessions (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å: user_agent, ip, platform –∏ —Ç.–¥.)
    const { error: sessionError } = await supabase
      .from('token_sessions')
      .insert({
        telegram_id: user.id,
        jti,
        created_at: new Date().toISOString(),
        revoked: false
      });

    if (sessionError) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', sessionError.message);
      // ‚ùó –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º ‚Äî –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥
    }

    // üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return res.status(200).json({
      ok: true,
      user,
      access_token,
      refresh_token,
      initData
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ verifyTelegram:', error.message);
    return res.status(401).json({ ok: false, error: 'Invalid signature or expired initData' });
  }
};
