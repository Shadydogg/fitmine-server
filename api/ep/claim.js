// /api/ep/claim.js ‚Äî v3.0.0
const supabase = require("../../lib/supabase");
const verifyAccessToken = require("../../lib/verifyAccessToken");

module.exports = async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  try {
    const user = await verifyAccessToken(req);
    const telegram_id = user.telegram_id;
    const today = new Date().toISOString().slice(0, 10);

    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const { data: activity, error: fetchError } = await supabase
      .from("user_activity")
      .select("*")
      .eq("telegram_id", telegram_id)
      .eq("date", today)
      .maybeSingle();

    if (fetchError || !activity) {
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞: PowerBank —É–∂–µ –ø–æ–ª—É—á–µ–Ω
    if (activity.ep_reward_claimed) {
      return res.status(200).json({
        ok: false,
        alreadyClaimed: true,
        message: "‚ö° PowerBank —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è",
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ü–µ–ª–∏ —É–∂–µ —É–¥–≤–æ–µ–Ω—ã ‚Äî –Ω–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å PowerBank
    if (activity.double_goal) {
      return res.status(200).json({
        ok: false,
        doubleGoalActive: true,
        message: "‚ö†Ô∏è –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å PowerBank –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ double goal",
      });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å (1000 EP)
    if (activity.ep < 1000) {
      return res.status(200).json({
        ok: false,
        goalNotReached: true,
        currentEP: activity.ep,
        message: `üéØ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EP (${activity.ep}/1000) –¥–ª—è PowerBank`,
      });
    }

    // 5. –í—Å—Ç–∞–≤–ª—è–µ–º PowerBank
    const { data: inserted, error: insertError } = await supabase
      .from("user_powerbanks")
      .insert({
        telegram_id,
        ep_amount: activity.ep,
        source: "ep_daily_goal",
        powerbank_type: "basic",
        claimed_at: new Date().toISOString(),
        used: false,
      })
      .select("id")
      .maybeSingle();

    if (insertError || !inserted?.id) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ PowerBank:", insertError);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PowerBank" });
    }

    // 6. –û–±–Ω–æ–≤–ª—è–µ–º user_activity: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º EP, —Å—Ç–∞–≤–∏–º double_goal
    const { error: updateError } = await supabase
      .from("user_activity")
      .upsert({
        telegram_id,
        date: today,
        ep: 0,
        ep_reward_claimed: true,
        double_goal: true,
        updated_at: new Date().toISOString(),
      }, {
        onConflict: ['telegram_id', 'date']
      });

    if (updateError) {
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" });
    }

    // 7. –û—Ç–≤–µ—Ç
    return res.status(200).json({
      ok: true,
      powerbankCreated: true,
      rewardId: inserted.id,
      rewardType: "powerbank_basic",
      message: "üéâ PowerBank —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!",
    });

  } catch (err) {
    console.error("‚ùå /api/ep/claim ERROR:", err);
    return res.status(401).json({ error: "Unauthorized", message: err.message });
  }
};
