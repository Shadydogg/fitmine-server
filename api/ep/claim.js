// /api/ep/claim.js ‚Äî v3.0.0
const supabase = require("../../lib/supabase");
const verifyAccessToken = require("../../lib/verifyAccessToken");

module.exports = async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  try {
    const user = await verifyAccessToken(req);
    const telegram_id = user.telegram_id;
    const today = new Date().toISOString().slice(0, 10);

    // 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const { data: activity, error: fetchError } = await supabase
      .from("user_activity")
      .select("ep, ep_reward_claimed, double_goal")
      .eq("telegram_id", telegram_id)
      .eq("date", today)
      .maybeSingle();

    if (fetchError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ user_activity:", fetchError);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" });
    }

    if (!activity) {
      return res.status(404).json({ error: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    const { ep, ep_reward_claimed, double_goal } = activity;

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞: PowerBank —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–µ–≥–æ–¥–Ω—è
    const { data: usedTodayPBs, error: pbError } = await supabase
      .from("user_powerbanks")
      .select("used, used_at")
      .eq("telegram_id", telegram_id)
      .eq("used", true);

    if (pbError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PowerBank:", pbError);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PowerBank" });
    }

    const usedToday = (usedTodayPBs || []).some(pb => {
      const usedAt = pb.used_at ? new Date(pb.used_at).toISOString().slice(0, 10) : null;
      return usedAt === today;
    });

    if (usedToday) {
      return res.status(200).json({
        ok: false,
        powerbankUsedToday: true,
        message: "‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω PowerBank, –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ",
      });
    }

    // 3. –£–∂–µ –ø–æ–ª—É—á–µ–Ω PowerBank
    if (ep_reward_claimed) {
      return res.status(200).json({
        ok: false,
        alreadyClaimed: true,
        message: "‚ö° PowerBank —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è",
      });
    }

    // 4. –¶–µ–ª–∏ —É–∂–µ —É–¥–≤–æ–µ–Ω—ã
    if (double_goal) {
      return res.status(200).json({
        ok: false,
        doubleGoalActive: true,
        message: "‚ö†Ô∏è –¶–µ–ª–∏ —É–∂–µ —É–¥–≤–æ–µ–Ω—ã, PowerBank –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
      });
    }

    // 5. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EP
    if (ep < 1000) {
      return res.status(200).json({
        ok: false,
        goalNotReached: true,
        currentEP: ep,
        message: `üéØ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EP (${ep}/1000) –¥–ª—è PowerBank`,
      });
    }

    // 6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ powerbank_rewards
    const { data: rewardRow, error: rewardInsertError } = await supabase
      .from("powerbank_rewards")
      .insert({
        telegram_id,
        type: "ep_daily_goal",
        source: "claim_api",
        context: `daily_claim_${today}`,
        created_at: new Date().toISOString(),
      })
      .select("id")
      .maybeSingle();

    if (rewardInsertError || !rewardRow?.id) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ powerbank_rewards:", rewardInsertError);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã" });
    }

    const reward_id = rewardRow.id;

    // 7. –í—Å—Ç–∞–≤–∫–∞ PowerBank
    const { data: inserted, error: insertError } = await supabase
      .from("user_powerbanks")
      .insert({
        telegram_id,
        ep_amount: ep,
        source: "ep_daily_goal",
        powerbank_type: "basic",
        claimed_at: new Date().toISOString(),
        used: false,
        reward_id,
      })
      .select("id")
      .maybeSingle();

    if (insertError || !inserted?.id) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ PowerBank:", insertError);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PowerBank" });
    }

    // 8. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ user_activity: –æ–±–Ω—É–ª—è–µ–º EP, –æ—Ç–º–µ—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É, –ù–ï –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º
    const { error: updateError } = await supabase
      .from("user_activity")
      .upsert({
        telegram_id,
        date: today,
        ep: 0,
        ep_reward_claimed: true,
        double_goal: true,
        ep_frozen: false,
        updated_at: new Date().toISOString(),
      }, {
        onConflict: ['telegram_id', 'date'],
      });

    if (updateError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è user_activity:", updateError);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" });
    }

    console.log(`‚úÖ PowerBank –≤—ã–¥–∞–Ω: ${inserted.id} | double_goal=true | reward_id=${reward_id}`);

    return res.status(200).json({
      ok: true,
      rewardId: inserted.id,
      rewardType: "powerbank_basic",
      powerbankCreated: true,
      doubleGoal: true,
      message: "üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. PowerBank –≤—ã–¥–∞–Ω –∏ —Ü–µ–ª–∏ —É–¥–≤–æ–µ–Ω—ã!",
    });

  } catch (err) {
    console.error("‚ùå /api/ep/claim ERROR:", err);
    return res.status(401).json({ error: "Unauthorized", message: err.message });
  }
};